#+title: Subbot
#+filetags: :subbot:

* Goals
** Manage =orders=
*** =Manager= can create =orders= based on a discord role
*** =Subbot= can split orders into different =jobs= 
*** =Worker= can subscribe to an =order= by choosing =job types=
*** =Manager= can follow the completion of orders
*** =Subbot= can ping the =delivery= role when an =order= is complete
*** =Subbot= can create a Teamcraft list

** Give people work based on =job types=
*** =Subbot= keeps track on the different =jobs=
*** =Subbot= offers available jobs to =workers=

** Manage a database of =parts= and =mats= needed
*** =Subbot= helps deciding if =Worker= has to craft or buy =mats=
*** =Subbot= keeps a stock

** Manage payments
*** Keeps track of who does what
*** Update =mats= prices

* UML diagrams
** Managing orders
[[file:img/manage_orders.png]]

#+begin_src plantuml :file img/manage_orders.png
  @startuml
  skinparam actorStyle awesome
  left to right direction
  actor Manager as m
  actor Worker as w
  actor Subbot as b

  rectangle Order {
    usecase "Create\norder" as Create
    usecase "Register as\nworker" as Register
    usecase "Follow\norder" as Follow
    usecase "Split\norder" as Jobs
  }
  m -> Create
  m -> Follow
  w -> Register : Choose job types
  b -> Jobs
  b -> Follow
  @enduml
#+end_src

#+RESULTS:
[[file:img/manage_orders.png]]

** Lifecycle of an order
[[file:img/lifecycle_order.png]]

#+begin_src plantuml :file img/lifecycle_order.png
  @startuml
  hide footbox
  actor Manager as m
  actor Worker as w
  actor Subbot as s
  participant Order as o
  collections Jobs as j

  m -> s : Create new order
  create o
  s -> o : Creates
  activate o
  s <- o : Notifies bot
  create j
  s -> j : Creates
  activate j
  loop
    w -> s : Register as worker
    s -> j : Select job by job-type
    j -> s : Unqueue a job
    w <- s : Assign job
    activate w
    w -> s : Complete job
    deactivate w
    s -> o : Update order
    m <- s : Notify Manager
  end
  deactivate j
  j -> s : No more jobs
  destroy j
  s -> m : Ready for delivery
  m -> m : delivers
  m -> s : Mark order as completed
  s -> o : Archive order
  destroy o

  @enduml
#+end_src

#+RESULTS:
[[file:img/lifecycle_order.png]]

** Anatomy of an order
*** FFItem
FFItem is a representation of an item from the game.
marketValue is:
- fixed for raw_mat
- calculated for middle_mat and sub_part

[[file:img/FFItem.png]]

#+begin_src plantuml :file img/FFItem.png
  @startuml

  class FFItem {
    id : Integer
    name : String
    itemType : Enum
    marketValue : Float
    craftingMatsList : Array of FFItem, quantity

    craftingValue()
    updateMarketValue()
  }

  note left of FFItem::itemType
    itemType can be
    - sub_part
    - middle_mat
    - raw_mat
  end note

  @enduml
#+end_src

#+RESULTS:
[[file:img/FFItem.png]]

*** Jobs

[[file:img/Job_types.png]]

#+begin_src plantuml :file img/Job_types.png
  @startuml

  class Job {
    id : Integer
    jobContent : Array of FFItem, Quantity
    jobType : Enum
    worker : Worker
    pay()
  }

  note left of Job::jobType
    jobType can be
    - assembling
    - quicksynthing
    - shopping
  end note

  @enduml
#+end_src

#+RESULTS:
[[file:img/Job_types.png]]

*** Order details

[[file:img/Anatomy_order.png]]

#+begin_src plantuml :file img/Anatomy_order.png
  @startuml

  class Order {
    id : Integer
    customer : String
    deliveryDate : Date
    status : Enum
    shoppingList()
  }

  class OrderItem {
    item : FFItem
    quantity : Integer
  }

  Order "1" *-- "many" OrderItem : contains

  @enduml
#+end_src

#+RESULTS:
[[file:img/Anatomy_order.png]]

* References
* Ideas
- Not discord roles, but the bot could handle a job queue system and people could be able to register on some job types
Like you type /gimmework
The bot replies with a prompt of the jobs available. You choose some on them. 
THen the bot replies with your next job.

